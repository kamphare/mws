{"version":3,"sources":["utils/ValidateFalsey.js","components/Sol.jsx","components/SolsList.jsx","components/DetailsTable.jsx","components/SolDetails.jsx","App.js","reportWebVitals.js","index.js"],"names":["ValidateFalsey","value","Sol","sol","id","avgTemp","avgWind","firstUTC","season","to","className","URL","process","SolsList","useState","sols","setSols","getSols","a","fetch","res","json","useEffect","map","key","DetailsTable","min","max","avg","label","unit","samples","round","num","toString","SolDetails","setSol","useParams","getSol","console","error","minTemp","maxTemp","tempSamples","minWind","maxWind","windSamples","LastUTC","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a68bbb4d.chunk.js","sourcesContent":["export function ValidateFalsey(value) {\r\n  if (value) {\r\n    return value;\r\n  } \r\n  else return \"N/A\"\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { ValidateFalsey } from '../utils/ValidateFalsey'\r\n\r\nexport function Sol({ sol, id }) {\r\n  \r\n  if (!sol) return null;\r\n  \r\n  const avgTemp = sol?.['AT']?.['av']\r\n  const avgWind = sol?.['HWS']?.['av']\r\n  const firstUTC = sol?.['First_UTC']\r\n  const season = sol?.['Season']\r\n  \r\n  return (\r\n      <Link to={`/details/${id}`}>\r\n        <div className=\"card grid--card\">\r\n          <div className=\"card__heading\">\r\n            <div className=\"heading__desc dark\">sol:</div>\r\n            <h2 className=\"orange\">{id}</h2>\r\n          </div>\r\n          <div className=\"card__sub-heading yellow\">\r\n            {ValidateFalsey(firstUTC)}\r\n          </div>\r\n          <div className=\"card__content grid--card-details\">\r\n            <div className=\"card__content-description\">Avg. Temperature:</div>\r\n            <div className=\"card__content-detail highlight yellow\">{avgTemp ? avgTemp : \"N/A\"}</div>\r\n            <div className=\"card__content-description\">Average Wind:</div>\r\n            <div className=\"card__content-detail highlight yellow\">{avgWind ? avgWind : \"N/A\"}</div>\r\n          </div>\r\n          <div className=\"card__footer\">\r\n            <h4 className=\"orange\">{season ? season : \"N/A\"}</h4>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n  )\r\n}","import { React, useState, useEffect } from 'react';\r\nimport { Sol } from './Sol'\r\nconst key = process.env.REACT_APP_API_KEY;\r\nconst URL = `https://api.nasa.gov/insight_weather/?api_key=${key}&feedtype=json&ver=1.0`;\r\n\r\nexport function SolsList() {\r\n  const [sols, setSols] = useState({});\r\n\r\n  const getSols = async () => {\r\n    const res = await fetch(URL);\r\n    const sols = await res.json();\r\n    setSols(sols);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getSols();\r\n  }, [])\r\n  \r\n  if (!sols['sol_keys']) return null;\r\n  \r\n  return (\r\n    <div className=\"grid--content\">\r\n      <div className=\"content__header\">\r\n        <h1>Latest Weather at Elysium Planitia</h1>\r\n        <h2>InSight is taking daily weather measurements (temperature, wind, pressure) on the surface of Mars at Elysium Planitia, a flat, smooth plain near Marsâ€™ equator.</h2>\r\n        <div className=\"warning\">Note: the data often changes and might be complete</div>\r\n      </div>\r\n      <div className=\"content__body grid--cards\">\r\n      {\r\n        sols['sol_keys'].map((key) => {\r\n          return <Sol key={key} id={key} sol={sols[key]}/>\r\n        })\r\n      }\r\n    </div>\r\n    </div>\r\n    \r\n  )\r\n}","import { React } from 'react';\r\n\r\nexport function DetailsTable({ min, max, avg, unit, label, samples}) {\r\n  \r\n  if (!min) return null;\r\n\r\n  function round(num, unit) {\r\n    if (num === \"N/A\") {\r\n      return num;\r\n    } \r\n    return toString(num) + unit\r\n  }\r\n\r\n  return (\r\n      <div className=\"details\">\r\n        <h2>{label}</h2>\r\n        <p>Average: {round(min)}</p>\r\n        <p>Max: {round(max)}</p>\r\n        <p>Min: {round(avg)}</p>\r\n        <p>Data combined from {samples} collected samples.</p>\r\n      </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { DetailsTable } from './DetailsTable'\r\nimport { ValidateFalsey } from '../utils/ValidateFalsey'\r\nconst key = process.env.REACT_APP_API_KEY;\r\nconst URL = `https://api.nasa.gov/insight_weather/?api_key=${key}&feedtype=json&ver=1.0`;\r\n\r\nexport function SolDetails() {\r\n  const [sol, setSol] = useState({});\r\n  let { id } = useParams();\r\n  \r\n  const getSol = async () => {\r\n    try {\r\n      const res = await fetch(URL);\r\n      const sol = await res.json();\r\n      setSol(sol[id]);\r\n    }\r\n    catch(e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getSol();\r\n  }, [])\r\n  \r\n  if (!sol) return null;\r\n  const minTemp = ValidateFalsey(sol?.['AT']?.['mn'])\r\n  const maxTemp = ValidateFalsey(sol?.['AT']?.['mx'])\r\n  const avgTemp = ValidateFalsey(sol?.['AT']?.['av'])\r\n  const tempSamples = ValidateFalsey(sol?.['AT']?.['ct'])\r\n  const minWind = ValidateFalsey(sol?.['HWS']?.['mn'])\r\n  const maxWind = ValidateFalsey(sol?.['HWS']?.['mx'])\r\n  const avgWind = ValidateFalsey(sol?.['HWS']?.['av'])\r\n  const windSamples = ValidateFalsey(sol?.['AT']?.['ct'])\r\n  const firstUTC = ValidateFalsey(sol?.['First_UTC'])\r\n  const LastUTC = ValidateFalsey(sol?.['Last_UTC'])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sol: {id}</h1>\r\n      <h2>Data collected between: {firstUTC} and {LastUTC}</h2>\r\n      <DetailsTable sol={sol} min={minTemp} max={maxTemp} avg={avgTemp} unit={'C'} label={'Temperature'} samples={tempSamples}/>\r\n      <DetailsTable min={minWind} max={maxWind} avg={avgWind} unit={'m/s'} label={'Wind'} samples={windSamples}/>\r\n\r\n    </div>\r\n  )\r\n}","import './App.css';\nimport { SolsList } from './components/SolsList'\nimport { SolDetails } from './components/SolDetails'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App grid--layout background\">\n      <header className=\"header\">\n        <nav className=\"nav grid--nav\">\n          <div className=\"nav__logo\">\n            MWS\n          </div>\n          <div className=\"nav__title\">\n            Mars Weather Service\n          </div>\n        </nav>\n      </header>\n      <main className=\"main\">\n        <Router>\n        <Switch>\n          <Route path=\"/details/:id\">\n            <SolDetails />\n          </Route>\n          <Route path=\"/\">\n            <SolsList />\n          </Route>\n        </Switch>\n        </Router>\n      </main>\n      <footer className=\"footer\">\n        <p>hello</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}